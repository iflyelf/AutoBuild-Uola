#=================================================
# https://github.com/iflyelf/AutoBuild-Uola
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: danxiaonuo
# Blog: https://www.danxiaonuo.com
#=================================================

# 编译的名称
name: 编译x86_64 Uola固件

# 设置触发条件
on:
  # 手动触发工作流
  workflow_dispatch:
    inputs:
      name:
        description: 'build-uola'
        required: true
        default: '编译x86_64 Uola固件'
  # 定时触发编译(每天早5点)
  #schedule:
  #  - cron: 0 21 * * 3
  # 点赞☆Star触发编译
  watch:
     types: [started]

# 任务集
jobs:
  uola:
    # 选择虚拟环境
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    
    # 编译版本选择
    name: 编译 ${{matrix.devices}} ${{matrix.target}} 固件
    strategy:
      fail-fast: false
      matrix:
        target: [uola]
        devices: [x86_64]
    
    # 运行步骤
    steps:
    
    # 检出各个代码模块
    - name: 检出各个代码模块
      uses: actions/checkout@v3
    
    # 加载配置文件    
    - name: 加载 Settings.ini
      run: | 
        source "${GITHUB_WORKSPACE}/os/${{matrix.target}}/${{matrix.devices}}/uola.ini"
        echo "matrix_target=${{matrix.target}}" >> $GITHUB_ENV
        echo "matrix_devices=${{matrix.devices}}" >> $GITHUB_ENV
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "TZ=${TZ}" >> $GITHUB_ENV
        echo "GITHUB_USER_NAME=${GITHUB_USER_NAME}" >> $GITHUB_ENV
        echo "GITHUB_USER_EMAIL=${GITHUB_USER_EMAIL}" >> $GITHUB_ENV
        echo "GITHUB_RROJECT=${GITHUB_RROJECT}" >> $GITHUB_ENV
        echo "BRANCH=${BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_SH=${DIY_SH}" >> $GITHUB_ENV
        echo "SSH_ACTIONS=${SSH_ACTIONS}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR=${UPLOAD_BIN_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_COWTRANSFER=${UPLOAD_COWTRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_WETRANSFER=${UPLOAD_WETRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_BRANCH=${UPLOAD_BRANCH}" >> $GITHUB_ENV
        echo "UPLOAD_BRANCH=${UPLOAD_BRANCH}" >> $GITHUB_ENV
        echo "CREATE_RELEASE=${CREATE_RELEASE}" >> $GITHUB_ENV
        echo "BUILD_USER=${BUILD_USER}" >> $GITHUB_ENV
        echo "SEND_WECHAT_MSG=${SEND_WECHAT_MSG}" >> $GITHUB_ENV
        echo "GITHUB_PATH=${GITHUB_PATH}" >> $GITHUB_ENV
        echo "GITHUB_RELEASE=${GITHUB_RELEASE}" >> $GITHUB_ENV
        
    # 初始化系统环境
    - name: 初始化系统环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        ( sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential clang flex g++ gawk gcc-multilib gettext \
        git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev swig libpython3-dev aria2 jq subversion qemu-utils ccache rename libelf-dev device-tree-compiler
        sudo -E apt-get -qq purge azure-cli ghc* zulu* llvm* firefox powershell openjdk* dotnet* google* mysql* php* android*
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean ) &
        sudo timedatectl set-timezone "$TZ"
        
    # 克隆源码
    - name: 克隆源码
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH uola
        cd uola
        echo "UOLAROOT=$PWD" >> $GITHUB_ENV
        echo "useVersionInfo=$(git show -s --date=short --format="作者: %an<br/>日期: %cd<br/>Commit: %s")" >> $GITHUB_ENV
        echo "DATE=$(TZ=CST-8 date "+%Y年%m月%d号-%H点%M分%S秒")" >> $GITHUB_ENV
        echo "RELEASE_DATE=$(TZ=CST-8 date "+%Y%m%d%H%M%S")" >> $GITHUB_ENV
    
    # 更新源
    - name: 更新源
      working-directory: ./uola
      run:  |
        ./scripts/feeds clean
        ./scripts/feeds update -a
       
    # 安装源
    - name: 安装源
      working-directory: ./uola
      run:  |
        ./scripts/feeds install -a
    
    # 加载自定义配置文件
    - name: 加载自定义配置文件
      run: |
        [ -e files ] && mv files $UOLAROOT/files
        [ -e ${GITHUB_WORKSPACE}/os/${{matrix.target}}/${{matrix.devices}}/$CONFIG_FILE ] && mv ${GITHUB_WORKSPACE}/os/${{matrix.target}}/${{matrix.devices}}/$CONFIG_FILE $UOLAROOT/.config
        
    # 生成配置文件
    - name: 生成配置文件
      working-directory: ./uola
      run: | 
        make defconfig
    
    # 下载固件包
    - name: 下载固件包
      working-directory: ./uola
      id: package
      run: |
        make -j$(($(nproc)+1)) download v=s
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \; 
           
    # 编译固件
    - name: 编译固件
      working-directory: ./uola
      id: compile
      run: |
        cd $UOLAROOT
        echo -e "$(($(nproc)+1)) thread compile"
        make tools/compile -j$(($(nproc)+1)) || make tools/compile -j1 V=s
        make toolchain/compile -j$(($(nproc)+1)) || make toolchain/compile -j1 V=s
        make target/compile -j$(($(nproc)+1)) || make target/compile -j1 V=s IGNORE_ERRORS=1
        make diffconfig
        make package/compile -j$(($(nproc)+1)) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
        make package/index
        echo "status=success" >> $GITHUB_OUTPUT
        
    
    # 设置环境变量
    - name: 设置环境变量
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $UOLAROOT/bin/packages/*
        PLATFORM=$(basename `pwd`)
        echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
        cd $UOLAROOT/bin/targets/*
        TARGET=$(basename `pwd`)
        echo "TARGET=$TARGET" >> $GITHUB_ENV
        cd *
        SUBTARGET=$(basename `pwd`)
        echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        
    # 获取固件
    - name: 获取固件
      working-directory: ./uola
      if: steps.compile.outputs.status == 'success'
      id: generate
      run: |
        make package/install -j$(($(nproc)+1)) || make package/install -j1 V=s
        make target/install -j$(($(nproc)+1)) || make target/install -j1 V=s
        make checksum
        echo "GENERATE_STATUS=success" >> $GITHUB_ENV
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
      
    # 准备文件
    - name: 准备文件
      run: |
          sudo mkdir -p -m 777 $UOLAROOT/artifact/firmware && cd $UOLAROOT/artifact/firmware
          echo "ARTIFACT_FIRMWARE=$PWD" >> $GITHUB_ENV
          sudo mkdir -p -m 777 $UOLAROOT/artifact/package && cd $UOLAROOT/artifact/package
          echo "ARTIFACT_PACKAGE=$PWD" >> $GITHUB_ENV
          sudo mkdir -p -m 777 $UOLAROOT/artifact/buildinfo && cd $UOLAROOT/artifact/buildinfo
          echo "ARTIFACT_BUILDINFO=$PWD" >> $GITHUB_ENV
          
    # 整理文件
    - name: 整理文件
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd $UOLAROOT && sudo -E cat .config > $ARTIFACT_BUILDINFO/config.info
        rm -rf $(find $UOLAROOT/bin/targets/ -type d -name "packages")
        cp -rf $(find $UOLAROOT/bin/targets/ -type f) $ARTIFACT_FIRMWARE
        cp -rf $(find $UOLAROOT/bin/packages/ -type f -name "*.ipk") $ARTIFACT_PACKAGE
        cp -rf $(find $UOLAROOT/bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") $ARTIFACT_BUILDINFO
        echo "status=success" >> $GITHUB_OUTPUT

          
    # 生成标签
    - name: 生成标签
      id: tag
      if: steps.compile.outputs.status == 'success' && env.CREATE_RELEASE == 'true' && !cancelled()
      run: |
        echo "RELEASE_TAG=${{ env.BRANCH }}-${{ env.RELEASE_DATE }}" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
    
    # 上传固件信息
    - name: 上传固件信息
      uses: actions/upload-artifact@v3
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
          name: Uola_buildinfo
          path: ${{ env.ARTIFACT_BUILDINFO }}

    # 上传固件包文件
    - name: 上传固件包文件
      uses: actions/upload-artifact@v3
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: Uola_package
        path: ${{ env.ARTIFACT_PACKAGE }}
    
    # 上传固件
    - name: 上传固件
      uses: actions/upload-artifact@v3
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: Uola_firmware
        path: ${{ env.FIRMWARE }}

    
    # 发行固件
    - name: 发行固件
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.UOLA_TOKEN }}
      with:
        name: 自动编译 / ${{ env.RELEASE_TAG }}
        tag_name: ${{ env.RELEASE_TAG }}
        body: |            
            1、本固件为自动编译
            2、发行版中只提供完整的固件
            3、需要单独IPK请到分支下载
            4、源码：${{ env.REPO_URL }}
            -- Build by ${{ env.BUILD_USER }} @ with Github Action on ${{ env.RELEASE_TAG }}
            🚀 Auto build | 自动编译   
            当前使用版本:            
            ${{ env.useVersionInfo }}
            ${{ github.event.commits[0].message }}
        files: ${{ env.ARTIFACT_FIRMWARE }}/openwrt-x86-64-generic-squashfs-combined-efi.img.gz
